[
    {
        "id": "1",
        "type": "tab",
        "label": "Hardware Monitoring",
        "disabled": false,
        "info": ""
    },
    {
        "id": "774e31ba3313707a",
        "type": "tab",
        "label": "T. Principal PUSRM100",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "190ed3e96d0709a5",
        "type": "tab",
        "label": "ADC2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5abe0cc40f5ad9c5",
        "type": "tab",
        "label": "DVP-04TC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "af530bfa0859125d",
        "type": "tab",
        "label": "ADC_8CH",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9fa46c697055fd5a",
        "type": "tab",
        "label": "T. Principal RTU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c542773be693934",
        "type": "tab",
        "label": "PLC_DELTA",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0630a8264fc13136",
        "type": "tab",
        "label": "Lab",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "feca9c5ced6ec599",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MP-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "74ceda570d3e66dc",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "75c0821a42a5cdfb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MN-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "689c5e6207baccbb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7d040f0f19d79e89",
        "type": "mqtt-broker",
        "name": "mqtt_tbb_ST-3.4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b2eea5177ada0477",
        "type": "mqtt-broker",
        "name": "mtt_tb_ST-3.3",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a32defc5189db4ea",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9c9e2630ed80f90e",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2772d50815d076a4",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "233cd5171dde3839",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3b8eefdff633489b",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_broker_1",
        "type": "mqtt-broker",
        "name": "Broker MQTT USR-W610",
        "broker": "192.168.1.44",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "586ef25fd8e81fa5",
        "type": "mqtt-broker",
        "name": "MN-4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b4cdb9cd5246ed2e",
        "type": "mqtt-broker",
        "name": "MN-06A",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4aabcdd5a91592fb",
        "type": "mqtt-broker",
        "name": "MN-6B",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c1c71d2192e51407",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ac8f4b3a29c864f",
        "type": "mqtt-broker",
        "name": "MN-1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bb61bb0c49cb82b4",
        "type": "mqtt-broker",
        "name": "MN-9",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aeb8c7546d28ce5c",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a694e78af934234",
        "type": "modbus-client",
        "name": "PLC_1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.7",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 100,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ba775fe896e243b7",
        "type": "modbus-client",
        "name": "DVP-04TC_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.202",
        "tcpPort": "502",
        "tcpType": "C701",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "ASCII",
        "serialBaudrate": "9600",
        "serialDatabits": "7",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f1b3a3acb886c48c",
        "type": "modbus-client",
        "name": "ADC_2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.203",
        "tcpPort": "4196",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3ab988e0e462aed7",
        "type": "modbus-client",
        "name": "ADC3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.202",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "200",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "5000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "60e5d9130b1268c8",
        "type": "modbus-client",
        "name": "VOLISON_4CH",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.201",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB1",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "52f2d0e38d313f88",
        "type": "modbus-client",
        "name": "EDP1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5587ad8696be252e",
        "type": "modbus-client",
        "name": "Modbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.100",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "",
        "serialConnectionDelay": "",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "100",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d065875da10205cd",
        "type": "modbus-client",
        "name": "USR-M100_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM4",
        "serialType": "RTU",
        "serialBaudrate": "115200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "100",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bc1023506614f084",
        "type": "ui-base",
        "name": "Valores sensores",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default"
    },
    {
        "id": "53bbd3554f5781e9",
        "type": "ui-page",
        "name": "Tablero principal",
        "ui": "bc1023506614f084",
        "path": "/pageN",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5cdddd25c8083b2f",
        "type": "ui-page",
        "name": "Temperaturas",
        "ui": "bc1023506614f084",
        "path": "/page2",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8ed92069bda431ea",
        "type": "ui-page",
        "name": "Sensores Flujo",
        "ui": "bc1023506614f084",
        "path": "/page3",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d506282cc9925a19",
        "type": "ui-page",
        "name": "Sensores nivel",
        "ui": "bc1023506614f084",
        "path": "/page4",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "76ec05f44078dd80",
        "type": "ui-page",
        "name": "Medidores de presion",
        "ui": "bc1023506614f084",
        "path": "/page5",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7c21feeaf5ff947a",
        "type": "ui-group",
        "name": "sensores Flujo",
        "page": "8ed92069bda431ea",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d1e5da8ea7145cd4",
        "type": "ui-group",
        "name": "Columnas De Destilación",
        "page": "53bbd3554f5781e9",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a80aac20c87d2431",
        "type": "ui-group",
        "name": "Sensores nivel",
        "page": "d506282cc9925a19",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "907eabc383ee4497",
        "type": "ui-group",
        "name": "medidores presion",
        "page": "d506282cc9925a19",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3f690bb5a526a246",
        "type": "ui-group",
        "name": "Tablero Alimentación Sistema",
        "page": "53bbd3554f5781e9",
        "width": "12",
        "height": "2",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "75e50c331c190f67",
        "type": "ui-group",
        "name": "Calentador de carga",
        "page": "53bbd3554f5781e9",
        "width": "3",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "485ecec3c95ed560",
        "type": "ui-group",
        "name": "Tablero HCD",
        "page": "53bbd3554f5781e9",
        "width": "12",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "60ac3cbdefc9f2e1",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "14px"
        }
    },
    {
        "id": "a3f93d08fd9f5245",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "cf4bce8f993858ac",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "flujo",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "ed48d447e5ea8d0c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb_refineria",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "da808a9572da86ac",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "be3423b36e62bb32",
        "type": "ui_tab",
        "name": "Monitoreo",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd77dc45c5cd8d11",
        "type": "ui_group",
        "name": "Sensores",
        "tab": "be3423b36e62bb32",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "abcd1234",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "abcd5678",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "aaac317de36dda4f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b4565baa97d43ef9",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "20566838667fb145",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "ac32fb280e4bb5e2",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "8f724134dab0a8aa",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "9249311daa14387f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "2f9523ff5d386a31",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "5ce554f3bf059e46",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "3fda7827b7b83ee3",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "sensores",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb2:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "a1b3d7fc83d5c6f6",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "influxdb2",
        "port": "8086",
        "tls": false
    },
    {
        "id": "inject-node",
        "type": "inject",
        "z": "1",
        "name": "Check System Usage",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "cpus-node",
                "memory-node",
                "loadavg-node",
                "uptime-node"
            ]
        ]
    },
    {
        "id": "os-function",
        "type": "function",
        "z": "1",
        "name": "Format OS Info",
        "func": "msg.payload = msg.payload || {};\nmsg.payload = `OS Info:\\nHostname: ${msg.payload.hostname || 'N/A'}\\nOS: ${msg.payload.type || 'N/A'}\\nPlatform: ${msg.payload.platform || 'N/A'}\\nArch: ${msg.payload.arch || 'N/A'}\\nRelease: ${msg.payload.release || 'N/A'}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "cpus-function",
        "type": "function",
        "z": "1",
        "name": "Format CPU Info",
        "func": "msg.payload = msg.payload.cpus || [];\nmsg.payload = `CPU Info:\\n${msg.payload.map((cpu, i) => `CPU ${i}: ${cpu.model || 'N/A'}, ${cpu.speed || 'N/A'}MHz`).join('\\n')}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 220,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "memory-function",
        "type": "function",
        "z": "1",
        "name": "Format Memory Info",
        "func": "msg.payload = msg.payload || {};\nconst usedMem = msg.payload.totalmem - msg.payload.freemem;\nmsg.payload = `Memory Info:\\nTotal: ${msg.payload.totalmem || 'N/A'}\\nFree: ${msg.payload.freemem || 'N/A'}\\nUsed: ${usedMem}\\nUsage: ${msg.payload.memusage || 'N/A'}%`;\n\nif (msg.payload.memusage > 80) {\n    node.warn('High memory usage detected.');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "debug-node",
                "memory-action"
            ]
        ]
    },
    {
        "id": "loadavg-function",
        "type": "function",
        "z": "1",
        "name": "Format Load Avg",
        "func": "msg.payload = msg.payload.loadavg || [];\nmsg.payload = `Load Average:\\n1 min: ${msg.payload[0] || 'N/A'}\\n5 min: ${msg.payload[1] || 'N/A'}\\n15 min: ${msg.payload[2] || 'N/A'}`;\n\nif (msg.payload[0] > 2.0) {\n    node.warn('High CPU load detected.');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "debug-node",
                "loadavg-action"
            ]
        ]
    },
    {
        "id": "uptime-function",
        "type": "function",
        "z": "1",
        "name": "Format Uptime",
        "func": "msg.payload = `Uptime: ${msg.payload.uptime || 'N/A'} seconds`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 400,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "memory-action",
        "type": "switch",
        "z": "1",
        "name": "Check High Memory Usage",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "80",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "exec-restart-node"
            ]
        ]
    },
    {
        "id": "loadavg-action",
        "type": "switch",
        "z": "1",
        "name": "Check High Load Average",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "2.0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "exec-restart-node"
            ]
        ]
    },
    {
        "id": "exec-restart-node",
        "type": "exec",
        "z": "1",
        "command": "sudo systemctl restart nodered",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart Node-RED",
        "x": 1510,
        "y": 300,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "debug-node",
        "type": "debug",
        "z": "1",
        "name": "Debug System Info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "dda475de079fd866",
        "type": "inject",
        "z": "1",
        "name": "Watchdog Check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f450c94fadb718a5",
        "type": "function",
        "z": "1",
        "name": "Check Ping Response",
        "func": "if (msg.payload === false) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "exec-restart-node"
            ],
            [
                "df6f035f5ecfcc55"
            ]
        ]
    },
    {
        "id": "df6f035f5ecfcc55",
        "type": "debug",
        "z": "1",
        "name": "Watchdog Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 540,
        "wires": []
    },
    {
        "id": "a9a197081ef0ca9b",
        "type": "inject",
        "z": "1",
        "name": "Check Dashboard Page",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "edd60240cfddc039"
            ]
        ]
    },
    {
        "id": "edd60240cfddc039",
        "type": "http request",
        "z": "1",
        "name": "Request Dashboard Page",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/dashboard/pageN",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 640,
        "wires": [
            [
                "07e0f916868db4d1"
            ]
        ]
    },
    {
        "id": "07e0f916868db4d1",
        "type": "function",
        "z": "1",
        "name": "Check Dashboard Page Response",
        "func": "if (msg.statusCode === 200) {\n    node.status({fill:\"green\",shape:\"dot\",text:\"Page OK\"});\n    return null;\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Page FAIL\"});\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 640,
        "wires": [
            [
                "exec-restart-node"
            ],
            [
                "1ef85a2213f592a4"
            ]
        ]
    },
    {
        "id": "163d682d40851e70",
        "type": "function",
        "z": "1",
        "name": "Check Node-RED Response",
        "func": "if (msg.payload === false) {\n    // Node-RED no responde\n    global.set(\"failedRestarts\", (global.get(\"failedRestarts\") || 0) + 1);\n    msg.failedRestarts = global.get(\"failedRestarts\");\n    return msg;\n} else {\n    // Node-RED responde correctamente\n    global.set(\"failedRestarts\", 0);\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 800,
        "wires": [
            [
                "5e69a8a36e1cabe1"
            ]
        ]
    },
    {
        "id": "5e69a8a36e1cabe1",
        "type": "function",
        "z": "1",
        "name": "Determine Restart Action",
        "func": "var failedRestarts = msg.failedRestarts || 0;\nif (failedRestarts >= 3) {\n    // Reiniciar el sistema completo\n    return { payload: \"sudo reboot\" };\n} else {\n    // Reiniciar solo Node-RED\n    return { payload: \"sudo systemctl restart nodered\" };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "c0649c6837ef2dd5"
            ]
        ]
    },
    {
        "id": "c0649c6837ef2dd5",
        "type": "exec",
        "z": "1",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute Restart Command",
        "x": 1360,
        "y": 800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "1ef85a2213f592a4",
        "type": "debug",
        "z": "1",
        "name": "debug dashboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 680,
        "wires": []
    },
    {
        "id": "os-node",
        "type": "OS",
        "z": "1",
        "name": "Get OS Info",
        "x": 720,
        "y": 160,
        "wires": [
            [
                "os-function"
            ]
        ]
    },
    {
        "id": "uptime-node",
        "type": "Uptime",
        "z": "1",
        "name": "Get Uptime",
        "x": 720,
        "y": 400,
        "wires": [
            [
                "uptime-function"
            ]
        ]
    },
    {
        "id": "cpus-node",
        "type": "CPUs",
        "z": "1",
        "name": "Get CPU Info",
        "x": 720,
        "y": 220,
        "wires": [
            [
                "cpus-function"
            ]
        ]
    },
    {
        "id": "loadavg-node",
        "type": "Loadavg",
        "z": "1",
        "name": "Get Load Average",
        "x": 720,
        "y": 340,
        "wires": [
            [
                "loadavg-function"
            ]
        ]
    },
    {
        "id": "memory-node",
        "type": "Memory",
        "z": "1",
        "name": "Get Memory Info",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "memory-function"
            ]
        ]
    },
    {
        "id": "f82aa43b217963a2",
        "type": "ping",
        "z": "1",
        "mode": null,
        "name": "Ping Node-RED",
        "host": "127.0.0.1",
        "timer": "20",
        "inputs": 0,
        "x": 920,
        "y": 540,
        "wires": [
            [
                "f450c94fadb718a5"
            ]
        ]
    },
    {
        "id": "13379e35fc62bd2a",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":0,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "f7560824a0d8e1fd",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "12b2a6a60cb738fb",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "5cc537bdb1b5ad21",
        "type": "change",
        "z": "774e31ba3313707a",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "c35997b5f347dc6d",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "bac742622d680996"
            ],
            [],
            [
                "d5e3838bfd751515"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "7266af7fbcd8963b",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "4c5ce72af50d0424",
        "type": "link in",
        "z": "774e31ba3313707a",
        "name": "link in 1",
        "links": [],
        "x": 245,
        "y": 100,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "d5e3838bfd751515",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a2623d80bc3d180d",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "e0c4523ad06bc343",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "CONV_FLO",
        "func": "const buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(msg.payload[0], 0);\nbuf.writeUInt16BE(msg.payload[1], 2);\n\n// Lee el buffer como un float de 32 bits (Big Endian) y asigna a una propiedad value\nmsg.payload = {\n    value: buf.readFloatBE(0),\n    timestamp: Date.now()  // Genera el timestamp aquí\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "6a466a3e2b1f7bfd"
            ]
        ]
    },
    {
        "id": "4faf6acb4205fdf5",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":2,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "a4df49ac2b45bc8e",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":4,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "6a466a3e2b1f7bfd",
        "type": "switch",
        "z": "774e31ba3313707a",
        "name": "PLC1 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_PLC1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 900,
        "y": 280,
        "wires": [
            [
                "01852f7a1044e7bf"
            ],
            [
                "648c5699d113437d"
            ],
            [
                "a264f23c87a1ea46"
            ],
            [
                "40474d8fa1941078"
            ],
            [],
            []
        ]
    },
    {
        "id": "6ad367bcbb38f62a",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":6,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "40e3a369778fb57b",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":8,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "c6641171f5cf621c",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":10,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "2be6e4e6503a1cb0",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1600,
        "y": 180,
        "wires": []
    },
    {
        "id": "2207624eb9549886",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1800,
        "y": 100,
        "wires": []
    },
    {
        "id": "2facb0ca0ffced52",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1600,
        "y": 240,
        "wires": []
    },
    {
        "id": "cfb2ffbef0b3f26f",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1740,
        "y": 360,
        "wires": []
    },
    {
        "id": "01852f7a1044e7bf",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "f4785be747598fe2",
                "904e6743db44aacc",
                "a3e9e08239043969"
            ],
            []
        ]
    },
    {
        "id": "d3f9c710fb3ddd3c",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// Añadir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no está disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros más antiguos que el tiempo máximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 140,
        "wires": [
            [
                "826df15d7a0b062c"
            ]
        ]
    },
    {
        "id": "826df15d7a0b062c",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen según la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para cálculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 80,
        "wires": [
            [
                "1a27c992c7a9ffb6",
                "e5566d777fba4bfa",
                "95e079b7c4507205"
            ]
        ]
    },
    {
        "id": "1a27c992c7a9ffb6",
        "type": "debug",
        "z": "774e31ba3313707a",
        "name": "Flujo COPE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 40,
        "wires": []
    },
    {
        "id": "648c5699d113437d",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = valorPresion.toFixed(4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "552f86e5699d801a",
                "ec24047e4f5fb171"
            ]
        ]
    },
    {
        "id": "f8e1f2aa42fd6eaa",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_flujo",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1500;\n\nconst valorADC = msg.payload[0];\nconst valorLitrosHora = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorLitrosHora);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 280,
        "wires": [
            [
                "11a7e231a0e608c7",
                "51826c4b34797c24"
            ]
        ]
    },
    {
        "id": "e5566d777fba4bfa",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 120,
        "wires": [
            [
                "62d5cb37693600e1"
            ]
        ]
    },
    {
        "id": "c44795bdb9c492c9",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1580,
        "y": 200,
        "wires": []
    },
    {
        "id": "f4785be747598fe2",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "c44795bdb9c492c9"
            ]
        ]
    },
    {
        "id": "62d5cb37693600e1",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1820,
        "y": 120,
        "wires": []
    },
    {
        "id": "11a7e231a0e608c7",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "efcd770b7ec0127a"
            ]
        ]
    },
    {
        "id": "efcd770b7ec0127a",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1560,
        "y": 260,
        "wires": []
    },
    {
        "id": "552f86e5699d801a",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "3ac2efc91dda38ac"
            ]
        ]
    },
    {
        "id": "3ac2efc91dda38ac",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1520,
        "y": 360,
        "wires": []
    },
    {
        "id": "904e6743db44aacc",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 160,
        "wires": [
            [
                "869327c13ded13cf"
            ]
        ]
    },
    {
        "id": "a3e9e08239043969",
        "type": "debug",
        "z": "774e31ba3313707a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 20,
        "wires": []
    },
    {
        "id": "51c52808a227cbd7",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 500,
        "wires": [
            [
                "fbc6e7f0798a7030"
            ]
        ]
    },
    {
        "id": "177f161edb9e2789",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "fbe9645fe6526a4c"
            ]
        ]
    },
    {
        "id": "fbe9645fe6526a4c",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "233cd5171dde3839",
        "x": 1700,
        "y": 540,
        "wires": []
    },
    {
        "id": "8c6257adbd66d7a3",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3b8eefdff633489b",
        "x": 1700,
        "y": 460,
        "wires": []
    },
    {
        "id": "bc0c2e06f6421329",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 420,
        "wires": [
            [
                "78933385e31d0243"
            ]
        ]
    },
    {
        "id": "ae4d02c8d2cd5a97",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "8c6257adbd66d7a3"
            ]
        ]
    },
    {
        "id": "a264f23c87a1ea46",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "bc0c2e06f6421329",
                "ae4d02c8d2cd5a97"
            ]
        ]
    },
    {
        "id": "40474d8fa1941078",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "51c52808a227cbd7",
                "177f161edb9e2789"
            ]
        ]
    },
    {
        "id": "bac742622d680996",
        "type": "modbus-flex-getter",
        "z": "774e31ba3313707a",
        "name": "PLC_2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5587ad8696be252e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "5cc537bdb1b5ad21",
                "e0c4523ad06bc343"
            ],
            []
        ]
    },
    {
        "id": "fbc6e7f0798a7030",
        "type": "ui-text",
        "z": "774e31ba3313707a",
        "group": "75e50c331c190f67",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Entrada BA-01",
        "label": "Entrada BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1700,
        "y": 500,
        "wires": []
    },
    {
        "id": "78933385e31d0243",
        "type": "ui-text",
        "z": "774e31ba3313707a",
        "group": "75e50c331c190f67",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Salida BA-01",
        "label": "Salida BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1710,
        "y": 420,
        "wires": []
    },
    {
        "id": "869327c13ded13cf",
        "type": "ui-chart",
        "z": "774e31ba3313707a",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1740,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "95e079b7c4507205",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1650,
        "y": 80,
        "wires": []
    },
    {
        "id": "ec24047e4f5fb171",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presión Alimentación",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1720,
        "y": 340,
        "wires": []
    },
    {
        "id": "51826c4b34797c24",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Flujo V. DA-01",
        "group": "7c21feeaf5ff947a",
        "order": 7,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo Vapor DA-01",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "700",
                "color": "#5cd65c"
            },
            {
                "from": "1200",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "1500",
        "sizeThickness": "20",
        "sizeGap": "3",
        "sizeKeyThickness": "16",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1740,
        "y": 280,
        "wires": []
    },
    {
        "id": "52808d04cdd74a21",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 560,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "d1bdf4bd97f40d4c",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "0c9c4c6ccd5f1680",
        "type": "change",
        "z": "190ed3e96d0709a5",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 600,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "a1d380aff2236a21",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 700,
        "wires": [
            [
                "935f6caa0c13c143"
            ],
            [],
            [
                "55b26ddfc0cc83ba"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "b846c12e16e8c9a6",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 480,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "c9844975fe8595b3",
        "type": "link in",
        "z": "190ed3e96d0709a5",
        "name": "link in 2",
        "links": [],
        "x": 405,
        "y": 440,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "55b26ddfc0cc83ba",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "5c1e21e0692f309f",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 940,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "69b686e91740cea5",
        "type": "switch",
        "z": "190ed3e96d0709a5",
        "name": "ADC2 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC2_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1160,
        "y": 700,
        "wires": [
            [
                "577bce23d5b23116"
            ],
            [
                "358a6d7f67ffce8f"
            ],
            [
                "73e1e81e7546e4fb"
            ],
            []
        ]
    },
    {
        "id": "e88437c06ce5e178",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 700,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "7ff3dc8119cca4d3",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":1,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 740,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "75e2840ee8295271",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":2,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "d24d58116973bc71",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "577bce23d5b23116",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-01",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (115500 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 560,
        "wires": [
            [
                "168aaf88f24c3fe4",
                "b4188b3a422f8bef",
                "e405700295bd27f7",
                "fcbfd2b58ba9ac83"
            ],
            []
        ]
    },
    {
        "id": "50d885b438d788be",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ac8f4b3a29c864f",
        "x": 1780,
        "y": 580,
        "wires": []
    },
    {
        "id": "168aaf88f24c3fe4",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "50d885b438d788be"
            ]
        ]
    },
    {
        "id": "b4188b3a422f8bef",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 520,
        "wires": [
            [
                "55044db629aca6f4"
            ]
        ]
    },
    {
        "id": "e405700295bd27f7",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-01",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 560,
        "wires": []
    },
    {
        "id": "358a6d7f67ffce8f",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-09",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (19000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 660,
        "wires": [
            [
                "c1ca46f6bb75b7dd",
                "83a76faa5a6226ef",
                "1765a68bea6d7b05",
                "d250c11d6dec42a9"
            ],
            []
        ]
    },
    {
        "id": "e5568dbdb4388bd7",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-9",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bb61bb0c49cb82b4",
        "x": 1780,
        "y": 680,
        "wires": []
    },
    {
        "id": "c1ca46f6bb75b7dd",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "e5568dbdb4388bd7"
            ]
        ]
    },
    {
        "id": "83a76faa5a6226ef",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 640,
        "wires": [
            [
                "409147dccbfefd7e"
            ]
        ]
    },
    {
        "id": "1765a68bea6d7b05",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-09",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 660,
        "wires": []
    },
    {
        "id": "73e1e81e7546e4fb",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-07",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (200000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 760,
        "wires": [
            [
                "1925a962bbeb0bdd",
                "ab6e924ec584b66b",
                "72632dd37f42d210",
                "d68d9ad9e6ba918a"
            ],
            []
        ]
    },
    {
        "id": "c22c16254362436d",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-7",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aeb8c7546d28ce5c",
        "x": 1780,
        "y": 780,
        "wires": []
    },
    {
        "id": "1925a962bbeb0bdd",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 780,
        "wires": [
            [
                "c22c16254362436d"
            ]
        ]
    },
    {
        "id": "ab6e924ec584b66b",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 740,
        "wires": [
            [
                "ad4fc4580773a583"
            ]
        ]
    },
    {
        "id": "72632dd37f42d210",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-07",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 760,
        "wires": []
    },
    {
        "id": "935f6caa0c13c143",
        "type": "modbus-flex-getter",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "f1b3a3acb886c48c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 680,
        "wires": [
            [
                "0c9c4c6ccd5f1680"
            ],
            [
                "69b686e91740cea5"
            ]
        ]
    },
    {
        "id": "55044db629aca6f4",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-01",
        "label": "Volumen FA-01",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "105000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "409147dccbfefd7e",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-09",
        "label": "Volumen FA-09",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "20000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ad4fc4580773a583",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-07",
        "label": "Volumen FA-07",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "200000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "fcbfd2b58ba9ac83",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-1',\n                equipo_id: 'FA-01',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 480,
        "wires": [
            [
                "c2f402fd7de228b2"
            ]
        ]
    },
    {
        "id": "c2f402fd7de228b2",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "190ed3e96d0709a5",
        "server": "a1b3d7fc83d5c6f6",
        "name": "DB",
        "x": 2190,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d250c11d6dec42a9",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-9',\n                equipo_id: 'FA-09',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 620,
        "wires": [
            [
                "c2f402fd7de228b2"
            ]
        ]
    },
    {
        "id": "d68d9ad9e6ba918a",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-7',\n                equipo_id: 'FA-07',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 720,
        "wires": [
            [
                "c2f402fd7de228b2"
            ]
        ]
    },
    {
        "id": "abbcccf771764af6",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":16,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 500,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "1e8be9ee0af07cce",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "2f776b033e7cd327",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "f5f5072b97fc34c5",
        "type": "change",
        "z": "5abe0cc40f5ad9c5",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 360,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "3eeca4f2870275ab",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "2c8e65186a7fd7ec"
            ],
            [],
            [
                "1769f99a48c701a1"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "2fceac4eaaf2ac16",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "e96f222d604596a9",
                "d8cb9785b7f8e460",
                "e9375f2985201972"
            ],
            [
                "849e5d398277bae3",
                "eb931d150b681d2e",
                "aeb67c1140dda1f4"
            ]
        ]
    },
    {
        "id": "a82d87f1056b77c2",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "1769f99a48c701a1",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "update log",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2185333d2bcd9585",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "78601e62052a7a7a",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":17,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "cb9058bec1b46565",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":15,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "f9271a012094580e",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":14,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "tempFormatFunction",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 340,
        "wires": [
            [
                "9e0c6a146be0aa98"
            ]
        ]
    },
    {
        "id": "861c961ca382753d",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 420,
        "wires": [
            [
                "7e4aa1530de89ffd"
            ]
        ]
    },
    {
        "id": "849e5d398277bae3",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 540,
        "wires": [
            [
                "e84c799602999daa"
            ]
        ]
    },
    {
        "id": "e96f222d604596a9",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 660,
        "wires": [
            [
                "b6b650a4d8645bca"
            ]
        ]
    },
    {
        "id": "81a729ec4384f6d9",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1; // Asumimos que la conversión es correcta según tu sistema\nlet adjustedTemperature = 1.3587 * temperature - 14.0434;\nmsg.payload = parseFloat(adjustedTemperature.toFixed(1)); // Envía solo el número ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 580,
        "wires": [
            [
                "2fceac4eaaf2ac16"
            ]
        ]
    },
    {
        "id": "d8cb9785b7f8e460",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 700,
        "wires": [
            [
                "ee5c7bf5c8137ae2"
            ]
        ]
    },
    {
        "id": "eb931d150b681d2e",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 580,
        "wires": [
            [
                "5f3d2e0b2c1e46f2"
            ]
        ]
    },
    {
        "id": "c6ceedc803939e46",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 460,
        "wires": [
            [
                "5118b9e8b421ccf0"
            ]
        ]
    },
    {
        "id": "831adbcf90229b5a",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 380,
        "wires": [
            [
                "64b2e6b11cd0b8af"
            ]
        ]
    },
    {
        "id": "specialTemperatureFunction",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura Especial",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1 * 1.022; // Multiplicación por 0.1 y luego por 1.022\nmsg.payload = parseFloat(temperature.toFixed(1)); // Envía solo el número ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "498a4b6131b3e221"
            ]
        ]
    },
    {
        "id": "498a4b6131b3e221",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "861c961ca382753d",
                "c6ceedc803939e46",
                "618b5a293f17ffcb"
            ]
        ]
    },
    {
        "id": "0808674536b8b325",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1 * 0.985; // Asumimos que la conversión es correcta según tu sistema\nlet adjustedTemperature = 1.3587 * temperature - 14.0434;\nmsg.payload = parseFloat(adjustedTemperature.toFixed(1)); // Envía solo el número ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "746cb60e1737af3b"
            ]
        ]
    },
    {
        "id": "746cb60e1737af3b",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "tempFormatFunction",
                "831adbcf90229b5a",
                "8e2b2fbd30dd597d"
            ]
        ]
    },
    {
        "id": "2c8e65186a7fd7ec",
        "type": "modbus-flex-getter",
        "z": "5abe0cc40f5ad9c5",
        "name": "output",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ba775fe896e243b7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 930,
        "y": 460,
        "wires": [
            [
                "f5f5072b97fc34c5"
            ],
            [
                "81a729ec4384f6d9",
                "specialTemperatureFunction",
                "0808674536b8b325"
            ]
        ]
    },
    {
        "id": "e84c799602999daa",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-02",
        "label": "Superior Columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 540,
        "wires": []
    },
    {
        "id": "b6b650a4d8645bca",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Inferior columna DA-02",
        "label": "Inferior columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 660,
        "wires": []
    },
    {
        "id": "9e0c6a146be0aa98",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-01",
        "label": "Superior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 340,
        "wires": []
    },
    {
        "id": "7e4aa1530de89ffd",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Inferior Columna DA-01",
        "label": "Inferior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 420,
        "wires": []
    },
    {
        "id": "8e2b2fbd30dd597d",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-3.2',\n                equipo_id: 'sup-DA-01',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 300,
        "wires": [
            [
                "bbc63a704ffb8b16"
            ]
        ]
    },
    {
        "id": "bbc63a704ffb8b16",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "5abe0cc40f5ad9c5",
        "server": "a1b3d7fc83d5c6f6",
        "name": "DB",
        "x": 2030,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "618b5a293f17ffcb",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-3.1',\n                equipo_id: 'inf-DA-01',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 500,
        "wires": [
            [
                "bbc63a704ffb8b16"
            ]
        ]
    },
    {
        "id": "aeb67c1140dda1f4",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-3.4',\n                equipo_id: 'sup-DA-02',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 620,
        "wires": [
            [
                "bbc63a704ffb8b16"
            ]
        ]
    },
    {
        "id": "e9375f2985201972",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-3.3',\n                equipo_id: 'inf-DA-02',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 740,
        "wires": [
            [
                "bbc63a704ffb8b16"
            ]
        ]
    },
    {
        "id": "5118b9e8b421ccf0",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c9e2630ed80f90e",
        "x": 1960,
        "y": 460,
        "wires": []
    },
    {
        "id": "64b2e6b11cd0b8af",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.2",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a32defc5189db4ea",
        "x": 1960,
        "y": 360,
        "wires": []
    },
    {
        "id": "5f3d2e0b2c1e46f2",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.4",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7d040f0f19d79e89",
        "x": 1980,
        "y": 560,
        "wires": []
    },
    {
        "id": "ee5c7bf5c8137ae2",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.3",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b2eea5177ada0477",
        "x": 1980,
        "y": 660,
        "wires": []
    },
    {
        "id": "e00fc1d0d3c743a7",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI0",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":96,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "b7810f4cf10e09bd",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "3c2713ff0b14637b",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "9a7897e7aa8a9fef",
        "type": "change",
        "z": "af530bfa0859125d",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "353a26fce582e8c1",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 560,
        "wires": [
            [
                "016a37d03da729e6"
            ],
            [],
            [
                "5181badbc62bd71b"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "f05fa78a9f1fb2b9",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "1324cca7591d2ccc",
        "type": "link in",
        "z": "af530bfa0859125d",
        "name": "link in 3",
        "links": [],
        "x": 305,
        "y": 260,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "5181badbc62bd71b",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "80a17bb3a34ff2e8",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 880,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "fc6786449d855df4",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC_3_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":97,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "3a1b7a401bce11cb",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":98,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "6382a708c5d5d64a",
        "type": "switch",
        "z": "af530bfa0859125d",
        "name": "ADC3 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC3_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 960,
        "y": 440,
        "wires": [
            [
                "75aad67f2f25ad34"
            ],
            [
                "0dc0895b9aa00f3f"
            ],
            [
                "ef0e847332fbea6c"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "bd27e451fea31f87",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":99,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "fb06c897cafafe9d",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":0,\"quantity\":2}",
        "payloadType": "json",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "dd43e1e756f244aa",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":5,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "5a6b0b197b9dddd2",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":6,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 660,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "ef0e847332fbea6c",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-04",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (65000 - 3200);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "b7d660696b25b6a1",
                "b37b8c9f95b42e83",
                "58df9191d2b0ec79",
                "3c7bd2b6b58e63b2"
            ],
            []
        ]
    },
    {
        "id": "b7d660696b25b6a1",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 240,
        "wires": [
            [
                "d709b91bb9b31854"
            ]
        ]
    },
    {
        "id": "b37b8c9f95b42e83",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 200,
        "wires": [
            [
                "d4d7dcc0b4ffc0bb"
            ]
        ]
    },
    {
        "id": "58df9191d2b0ec79",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-04",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 320,
        "wires": []
    },
    {
        "id": "0dc0895b9aa00f3f",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-06A",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (51600 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "997623779ae3ed09",
                "237f98f39bd31333",
                "fcf47df319656d71",
                "3b98220af74f56d8"
            ],
            []
        ]
    },
    {
        "id": "997623779ae3ed09",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 420,
        "wires": [
            [
                "49c37cc664a44929"
            ]
        ]
    },
    {
        "id": "237f98f39bd31333",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 360,
        "wires": [
            [
                "b975d4199caf0fab"
            ]
        ]
    },
    {
        "id": "fcf47df319656d71",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-06A",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 500,
        "wires": []
    },
    {
        "id": "75aad67f2f25ad34",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-06B",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (94100 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 540,
        "wires": [
            [
                "b59a10c3b3f0eff7",
                "8a4c85b2584f7d44",
                "81a1f17334e29684",
                "13a0c4110a20ed53"
            ],
            []
        ]
    },
    {
        "id": "b59a10c3b3f0eff7",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 580,
        "wires": [
            [
                "2931b04fa8bce7d3"
            ]
        ]
    },
    {
        "id": "8a4c85b2584f7d44",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 540,
        "wires": [
            [
                "a9d0c6ab38b8787e"
            ]
        ]
    },
    {
        "id": "81a1f17334e29684",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-06B",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 660,
        "wires": []
    },
    {
        "id": "016a37d03da729e6",
        "type": "modbus-flex-getter",
        "z": "af530bfa0859125d",
        "name": "ADC3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "3ab988e0e462aed7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "6382a708c5d5d64a",
                "9a7897e7aa8a9fef"
            ],
            []
        ]
    },
    {
        "id": "d4d7dcc0b4ffc0bb",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-04",
        "label": "Volumen FA-04",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "63000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b975d4199caf0fab",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-06A",
        "label": "Volumen FA-06A",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "54000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1650,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a9d0c6ab38b8787e",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-06B",
        "label": "Volumen FA-06B",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "93000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1650,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3c7bd2b6b58e63b2",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-4',\n                equipo_id: 'FA-04',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "881bb3d5dd494de2",
                "bf111d3532fc126d"
            ]
        ]
    },
    {
        "id": "881bb3d5dd494de2",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "af530bfa0859125d",
        "server": "a1b3d7fc83d5c6f6",
        "name": "DB",
        "x": 1950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3b98220af74f56d8",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-6A',\n                equipo_id: 'FA-06A',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "881bb3d5dd494de2"
            ]
        ]
    },
    {
        "id": "13a0c4110a20ed53",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-6B',\n                equipo_id: 'FA-06B',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 620,
        "wires": [
            [
                "881bb3d5dd494de2"
            ]
        ]
    },
    {
        "id": "d709b91bb9b31854",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-4",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "586ef25fd8e81fa5",
        "x": 1640,
        "y": 240,
        "wires": []
    },
    {
        "id": "49c37cc664a44929",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-6A",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b4cdb9cd5246ed2e",
        "x": 1660,
        "y": 400,
        "wires": []
    },
    {
        "id": "2931b04fa8bce7d3",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-6B",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4aabcdd5a91592fb",
        "x": 1660,
        "y": 580,
        "wires": []
    },
    {
        "id": "c5921641e6165210",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "sim",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7500",
        "payloadType": "num",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "ef0e847332fbea6c",
                "0dc0895b9aa00f3f",
                "75aad67f2f25ad34"
            ]
        ]
    },
    {
        "id": "bf111d3532fc126d",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 280,
        "wires": []
    },
    {
        "id": "b6ad7e85b72dac92",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "a55f26ece7c5d393",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 560,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "e876b6180acc4082",
        "type": "change",
        "z": "9fa46c697055fd5a",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 660,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "9e6c0ff1151a09d0",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 780,
        "wires": [
            [
                "e6e60d5a9427cf31"
            ],
            [],
            [
                "53d976498e89501e"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "7b75b7eec74151d1",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 520,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "3782d60ed19c01fc",
        "type": "link in",
        "z": "9fa46c697055fd5a",
        "name": "link in 4",
        "links": [],
        "x": 795,
        "y": 480,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "53d976498e89501e",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "58a7f2059c9ae542",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 720,
        "y": 900,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "9a01a5f2a23f06fd",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload; // Usar directamente msg.payload\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 540,
        "wires": [
            [
                "18eab2c3c21c232b",
                "3fdacd0a92232648",
                "26e5c2b41a0956af",
                "84517156e2445598"
            ],
            []
        ]
    },
    {
        "id": "08481f95f5e7ae86",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// Añadir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no está disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload // Usar directamente msg.payload\n});\n\n// Eliminar registros más antiguos que el tiempo máximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 500,
        "wires": [
            [
                "2ef0ebdea5ea4864"
            ]
        ]
    },
    {
        "id": "2ef0ebdea5ea4864",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen según la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para cálculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 440,
        "wires": [
            [
                "fe37a83f45e1fa81",
                "01aeed515035bd81",
                "cb807d9921cf7180",
                "6c6ac34e890f43b1"
            ]
        ]
    },
    {
        "id": "fe37a83f45e1fa81",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "Flujo COPE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 400,
        "wires": []
    },
    {
        "id": "afb5d4de17525b0c",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload;\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Number(valorPresion.toFixed(4));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 700,
        "wires": [
            [
                "cf76eeb0d17bcb0c",
                "09835dd1239de5ec",
                "bdc7c6e18b820b06"
            ]
        ]
    },
    {
        "id": "ec132924d2383db1",
        "type": "switch",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC1_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1370,
        "y": 740,
        "wires": [
            [
                "08481f95f5e7ae86",
                "9a01a5f2a23f06fd"
            ],
            [
                "afb5d4de17525b0c"
            ],
            [
                "e2fd54688464cad7"
            ],
            [
                "ed83ac5be50fc27a"
            ]
        ]
    },
    {
        "id": "01aeed515035bd81",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 480,
        "wires": [
            [
                "963e67092d981e36"
            ]
        ]
    },
    {
        "id": "18eab2c3c21c232b",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 560,
        "wires": [
            [
                "a947519dd216c454"
            ]
        ]
    },
    {
        "id": "cf76eeb0d17bcb0c",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 700,
        "wires": [
            [
                "85b4e8d97f116749"
            ]
        ]
    },
    {
        "id": "3fdacd0a92232648",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 520,
        "wires": [
            [
                "419f65e87999b9e3"
            ]
        ]
    },
    {
        "id": "26e5c2b41a0956af",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 380,
        "wires": []
    },
    {
        "id": "107e06bff656ac13",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI0",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 680,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "91bc601704a59123",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":1,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 740,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "ba18db91af131520",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":2,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "2e449a91df660a42",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":3,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 860,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "8c67b189d0ac49f0",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 860,
        "wires": [
            [
                "371770d320aa2377"
            ]
        ]
    },
    {
        "id": "d53001100386791f",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 900,
        "wires": [
            [
                "e729a7dadb878a4c"
            ]
        ]
    },
    {
        "id": "53bc7861172a15e8",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"°C\"; // Añade la unidad °C al número\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 780,
        "wires": [
            [
                "8413cbabe0b57832"
            ]
        ]
    },
    {
        "id": "e1ac2c5b7610bf5a",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 820,
        "wires": [
            [
                "dec46ef532293f9a"
            ]
        ]
    },
    {
        "id": "ed83ac5be50fc27a",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload;\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 780,
        "wires": [
            [
                "53bc7861172a15e8",
                "e1ac2c5b7610bf5a",
                "5c927be20b3e48d7"
            ]
        ]
    },
    {
        "id": "e2fd54688464cad7",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload;\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 860,
        "wires": [
            [
                "8c67b189d0ac49f0",
                "d53001100386791f",
                "b9b3caeb790b80fe"
            ]
        ]
    },
    {
        "id": "e6e60d5a9427cf31",
        "type": "modbus-flex-getter",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "60e5d9130b1268c8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1160,
        "y": 740,
        "wires": [
            [
                "e876b6180acc4082",
                "ec132924d2383db1"
            ],
            []
        ]
    },
    {
        "id": "371770d320aa2377",
        "type": "ui-text",
        "z": "9fa46c697055fd5a",
        "group": "75e50c331c190f67",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Entrada BA-01",
        "label": "Entrada BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 2240,
        "y": 860,
        "wires": []
    },
    {
        "id": "8413cbabe0b57832",
        "type": "ui-text",
        "z": "9fa46c697055fd5a",
        "group": "75e50c331c190f67",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Salida BA-01",
        "label": "Salida BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 2250,
        "y": 780,
        "wires": []
    },
    {
        "id": "419f65e87999b9e3",
        "type": "ui-chart",
        "z": "9fa46c697055fd5a",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 2280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cb807d9921cf7180",
        "type": "ui-gauge",
        "z": "9fa46c697055fd5a",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2190,
        "y": 440,
        "wires": []
    },
    {
        "id": "09835dd1239de5ec",
        "type": "ui-gauge",
        "z": "9fa46c697055fd5a",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presión Alimentación",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 700,
        "wires": []
    },
    {
        "id": "84517156e2445598",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "F_influx_vol",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MN-2.1',\n                equipo_id: 'FA-02A',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                nivel_litros: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 600,
        "wires": [
            [
                "502ec4d7d999a369"
            ]
        ]
    },
    {
        "id": "502ec4d7d999a369",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "9fa46c697055fd5a",
        "server": "a1b3d7fc83d5c6f6",
        "name": "DB",
        "x": 2450,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8a8aa07e83314529",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "sim",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "9630",
        "payloadType": "num",
        "x": 1490,
        "y": 480,
        "wires": [
            [
                "9a01a5f2a23f06fd",
                "e2fd54688464cad7",
                "6c6ac34e890f43b1"
            ]
        ]
    },
    {
        "id": "b9b3caeb790b80fe",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-2.1',\n                equipo_id: 'ent-BA-01',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 940,
        "wires": [
            [
                "502ec4d7d999a369"
            ]
        ]
    },
    {
        "id": "5c927be20b3e48d7",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "F_influx_temp",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'ST-2.2',\n                equipo_id: 'sal-BA-01',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                temperatura_c: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 740,
        "wires": [
            [
                "502ec4d7d999a369"
            ]
        ]
    },
    {
        "id": "4057baaaf4ce627d",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "sim",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "19520",
        "payloadType": "num",
        "x": 1530,
        "y": 860,
        "wires": [
            [
                "ed83ac5be50fc27a",
                "afb5d4de17525b0c",
                "e2fd54688464cad7"
            ]
        ]
    },
    {
        "id": "bdc7c6e18b820b06",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "F_influx_presion",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MP-1.1',\n                equipo_id: 'FA-02A',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                presion_kg: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 660,
        "wires": [
            [
                "502ec4d7d999a369",
                "0a0c33bb829f3465"
            ]
        ]
    },
    {
        "id": "0a0c33bb829f3465",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 660,
        "wires": []
    },
    {
        "id": "6c6ac34e890f43b1",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "F_influx_flujo",
        "func": "msg.payload = {\n    bucket: 'sensores',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ParametrosProceso',\n            tags: {\n                sensor_id: 'MF-1.1',\n                equipo_id: 'FA-02A',\n                ubicacion: 'destilados'\n            },\n            fields: {\n                flujo_lh: msg.payload\n            },\n            timestamp: Date.now()\n        }\n    ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 360,
        "wires": [
            [
                "502ec4d7d999a369"
            ]
        ]
    },
    {
        "id": "963e67092d981e36",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 2360,
        "y": 480,
        "wires": []
    },
    {
        "id": "a947519dd216c454",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 2100,
        "y": 560,
        "wires": []
    },
    {
        "id": "85b4e8d97f116749",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 2400,
        "y": 700,
        "wires": []
    },
    {
        "id": "dec46ef532293f9a",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_ST-2.2",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3b8eefdff633489b",
        "x": 2240,
        "y": 820,
        "wires": []
    },
    {
        "id": "e729a7dadb878a4c",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "233cd5171dde3839",
        "x": 2240,
        "y": 900,
        "wires": []
    },
    {
        "id": "e468469d275fa87c",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "a416bf9ca8b1c1b2",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "b8e1d796b05674a8",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 340,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "ebd7a51a32780957",
        "type": "change",
        "z": "1c542773be693934",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 440,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "9303d4b089a21f41",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "3f6664678974d7c5"
            ],
            [],
            [
                "13568d1d69f5c55e"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "b36d904278fc991d",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 300,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "3d68401642957f3e",
        "type": "link in",
        "z": "1c542773be693934",
        "name": "link in 5",
        "links": [],
        "x": 285,
        "y": 260,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "187da7c60f73551c",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 900,
        "wires": [
            [
                "b44b8c69a1faf51b"
            ]
        ]
    },
    {
        "id": "13568d1d69f5c55e",
        "type": "function",
        "z": "1c542773be693934",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "3a50df8a8cf4c965",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 800,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "4f34ae3b1233ec04",
        "type": "function",
        "z": "1c542773be693934",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "2fe651fd21e69569",
                "eaaac0825643be54"
            ],
            []
        ]
    },
    {
        "id": "6a6312d55f8dcf96",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// Añadir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no está disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros más antiguos que el tiempo máximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 280,
        "wires": [
            [
                "fcf40b894ba229f7"
            ]
        ]
    },
    {
        "id": "fcf40b894ba229f7",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen según la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para cálculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 220,
        "wires": [
            [
                "a7d396375a027932",
                "a415ac84e6482a53"
            ]
        ]
    },
    {
        "id": "5d5fc976f4699b13",
        "type": "function",
        "z": "1c542773be693934",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = valorPresion.toFixed(4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "9d65a53a93f889f3",
                "65250917b9e4327e"
            ]
        ]
    },
    {
        "id": "152e4b6e6c143d33",
        "type": "function",
        "z": "1c542773be693934",
        "name": "calc_flujo",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10000;\n\nconst valorADC = msg.payload[0];\nconst valorLitrosHora = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorLitrosHora);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "180118feaf9d2736"
            ]
        ]
    },
    {
        "id": "3f6664678974d7c5",
        "type": "modbus-flex-getter",
        "z": "1c542773be693934",
        "name": "EDP1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "52f2d0e38d313f88",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "ebd7a51a32780957",
                "03d41b2c3247feae"
            ],
            []
        ]
    },
    {
        "id": "03d41b2c3247feae",
        "type": "switch",
        "z": "1c542773be693934",
        "name": "EDP1_Registros",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_EDP1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 950,
        "y": 440,
        "wires": [
            [
                "152e4b6e6c143d33"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a7d396375a027932",
        "type": "function",
        "z": "1c542773be693934",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 260,
        "wires": [
            [
                "a1f9233ee0a2b965"
            ]
        ]
    },
    {
        "id": "fa6ab33868c809f7",
        "type": "mqtt out",
        "z": "1c542773be693934",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1590,
        "y": 340,
        "wires": []
    },
    {
        "id": "2fe651fd21e69569",
        "type": "function",
        "z": "1c542773be693934",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 340,
        "wires": [
            [
                "fa6ab33868c809f7"
            ]
        ]
    },
    {
        "id": "a1f9233ee0a2b965",
        "type": "mqtt out",
        "z": "1c542773be693934",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1840,
        "y": 260,
        "wires": []
    },
    {
        "id": "f409eaedb46ac5a8",
        "type": "function",
        "z": "1c542773be693934",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 400,
        "wires": [
            [
                "6e221eeff686fcca"
            ]
        ]
    },
    {
        "id": "6e221eeff686fcca",
        "type": "mqtt out",
        "z": "1c542773be693934",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1590,
        "y": 400,
        "wires": []
    },
    {
        "id": "9d65a53a93f889f3",
        "type": "function",
        "z": "1c542773be693934",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "a4ec32fa344011d2"
            ]
        ]
    },
    {
        "id": "a4ec32fa344011d2",
        "type": "mqtt out",
        "z": "1c542773be693934",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1780,
        "y": 520,
        "wires": []
    },
    {
        "id": "0c9b22b8a6397d87",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload[0]",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 980,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a415ac84e6482a53",
        "type": "ui-gauge",
        "z": "1c542773be693934",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1680,
        "y": 220,
        "wires": []
    },
    {
        "id": "d7dfc5c9bfbfba96",
        "type": "ui-chart",
        "z": "1c542773be693934",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1770,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "eaaac0825643be54",
        "type": "function",
        "z": "1c542773be693934",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 300,
        "wires": [
            [
                "d7dfc5c9bfbfba96"
            ]
        ]
    },
    {
        "id": "65250917b9e4327e",
        "type": "ui-gauge",
        "z": "1c542773be693934",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presión Alimentación",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1750,
        "y": 480,
        "wires": []
    },
    {
        "id": "fa094c6d4ff8cf0d",
        "type": "ui-gauge",
        "z": "1c542773be693934",
        "name": "Flujo V. DA-01",
        "group": "d1e5da8ea7145cd4",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo Vapor DA-01",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "700",
                "color": "#5cd65c"
            },
            {
                "from": "1200",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "1500",
        "sizeThickness": "20",
        "sizeGap": "3",
        "sizeKeyThickness": "16",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1770,
        "y": 420,
        "wires": []
    },
    {
        "id": "fbc2944679601f74",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 930,
        "y": 300,
        "wires": [
            [
                "4f34ae3b1233ec04"
            ]
        ]
    },
    {
        "id": "e5ec3c5ce2235b02",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "18500",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 930,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9880b3f091a9563f",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "168988dc446704c8"
            ]
        ]
    },
    {
        "id": "59178b6fc859e9d1",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "c780e35b4522eb2e"
            ]
        ]
    },
    {
        "id": "168988dc446704c8",
        "type": "change",
        "z": "1c542773be693934",
        "name": "set flow.flags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c780e35b4522eb2e",
        "type": "change",
        "z": "1c542773be693934",
        "name": "set flow.registers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b44b8c69a1faf51b",
        "type": "function",
        "z": "1c542773be693934",
        "name": "health check",
        "func": "let status = 'Unknown';\n\nif (msg.payload === 'online') {\n    status = 'Online';\n} else if (msg.payload === 'offline') {\n    status = 'Offline';\n}\n\nmsg.payload = {\n    status: status,\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 960,
        "wires": [
            [
                "3277d08d1e03ce5f"
            ]
        ]
    },
    {
        "id": "3277d08d1e03ce5f",
        "type": "switch",
        "z": "1c542773be693934",
        "name": "update diag",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Online",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 1020,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "773e7c5b3c0defa7",
        "type": "catch",
        "z": "1c542773be693934",
        "name": "",
        "scope": [
            "3f6664678974d7c5",
            "6ad4fc497729c7be"
        ],
        "uncaught": false,
        "x": 640,
        "y": 780,
        "wires": [
            [
                "79615c24144643b5"
            ]
        ]
    },
    {
        "id": "79615c24144643b5",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Error Handling",
        "func": "const maxRetries = 3;\nconst retryDelay = 5000;\n\nlet retryCount = flow.get('retryCount') || 0;\n\nif (retryCount < maxRetries) {\n    // Incrementar el contador de reintentos\n    retryCount++;\n    flow.set('retryCount', retryCount);\n    \n    // Programar el reintento después del intervalo de tiempo especificado\n    setTimeout(function() {\n        node.warn(`Retrying communication (attempt ${retryCount})`);\n        node.send(msg);\n    }, retryDelay);\n} else {\n    // Se alcanzó el número máximo de reintentos, enviar notificación de error crítico\n    node.error('Max retries reached. Critical error occurred.');\n    \n    // Enviar notificación por correo electrónico o otro medio\n    const alertMsg = {\n        payload: {\n            to: 'tableroas14@gmail.com',\n            subject: 'Critical Error - Max Retries Reached',\n            body: 'The system encountered a critical error. Max retries reached.'\n        }\n    };\n    node.send([null, alertMsg]);\n    \n    // Restablecer el contador de reintentos\n    flow.set('retryCount', 0);\n}\n\nreturn;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 780,
        "wires": [
            [
                "9303d4b089a21f41"
            ],
            [
                "7ea464f83085cf52"
            ]
        ]
    },
    {
        "id": "7ea464f83085cf52",
        "type": "e-mail",
        "z": "1c542773be693934",
        "server": "smtp.gmail.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "tableroas14@gmail.com",
        "dname": "MTO",
        "x": 1080,
        "y": 800,
        "wires": []
    },
    {
        "id": "2d09587bc5f9e328",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Error Handling",
        "func": "const maxRetries = 3;\nconst retryDelay = 5000;\nconst maxFlowRestarts = 2;\nconst maxServerRestarts = 1;\n\nlet retryCount = flow.get('retryCount') || 0;\nlet flowRestartCount = flow.get('flowRestartCount') || 0;\nlet serverRestartCount = flow.get('serverRestartCount') || 0;\n\nif (retryCount < maxRetries) {\n    // Incrementar el contador de reintentos\n    retryCount++;\n    flow.set('retryCount', retryCount);\n    \n    // Programar el reintento después del intervalo de tiempo especificado\n    setTimeout(function() {\n        node.warn(`Retrying communication (attempt ${retryCount})`);\n        node.send(msg);\n    }, retryDelay);\n} else {\n    // Se alcanzó el número máximo de reintentos\n    node.error('Max retries reached. Triggering flow restart.');\n    \n    // Reiniciar el flujo\n    if (flowRestartCount < maxFlowRestarts) {\n        flowRestartCount++;\n        flow.set('flowRestartCount', flowRestartCount);\n        \n        // Enviar mensaje al nodo de reinicio del flujo\n        const flowRestartMsg = {\n            payload: {\n                action: 'restartFlow'\n            }\n        };\n        node.send([null, null, flowRestartMsg]);\n    } else {\n        // Se alcanzó el número máximo de reinicios del flujo\n        node.error('Max flow restarts reached. Triggering server restart.');\n        \n        // Reiniciar el servidor Node-RED\n        if (serverRestartCount < maxServerRestarts) {\n            serverRestartCount++;\n            flow.set('serverRestartCount', serverRestartCount);\n            \n            // Enviar mensaje al nodo de reinicio del servidor\n            const serverRestartMsg = {\n                payload: {\n                    action: 'restartServer'\n                }\n            };\n            node.send([null, null, null, serverRestartMsg]);\n        } else {\n            // Se alcanzó el número máximo de reinicios del servidor\n            node.error('Max server restarts reached. Triggering system reboot.');\n            \n            // Enviar mensaje al nodo de reinicio del sistema\n            const systemRebootMsg = {\n                payload: {\n                    action: 'rebootSystem'\n                }\n            };\n            node.send([null, null, null, null, systemRebootMsg]);\n        }\n    }\n    \n    // Restablecer el contador de reintentos\n    flow.set('retryCount', 0);\n}\n\nreturn;",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 980,
        "wires": [
            [],
            [],
            [
                "26e9f12201ae97c6"
            ],
            [
                "e7a01423207e3dc9"
            ],
            [
                "5c54763d2b95cc1a"
            ]
        ]
    },
    {
        "id": "26e9f12201ae97c6",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Restart Flow",
        "func": "const http = require('http');\n\n// URL de la API de Node-RED para reiniciar el flujo\nconst nodeRedUrl = 'http://localhost:1880/flows';\n\n// Opciones de la solicitud HTTP\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Node-RED-Deployment-Type': 'reload'\n    }\n};\n\n// Función para reiniciar el flujo\nfunction restartFlow(msg) {\n    const req = http.request(options, (res) => {\n        let data = '';\n\n        res.on('data', (chunk) => {\n            data += chunk;\n        });\n\n        res.on('end', () => {\n            if (res.statusCode === 200) {\n                node.log('Flow restarted successfully');\n                node.status({ fill: 'green', shape: 'dot', text: 'Flow restarted' });\n            } else {\n                node.error('Failed to restart flow. Status code: ' + res.statusCode);\n                node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n            }\n        });\n    });\n\n    req.on('error', (error) => {\n        node.error('Failed to restart flow. Error: ' + error.message);\n        node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n    });\n\n    req.end();\n\n    return msg;\n}\n\n// Reiniciar el flujo cuando se recibe un mensaje\nrestartFlow(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "e7a01423207e3dc9",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Restart Server",
        "func": "const exec = require('child_process').exec;\n\n// Comando para reiniciar el servidor Node-RED\nconst restartCommand = 'sudo systemctl restart nodered';\n\n// Función para reiniciar el servidor Node-RED\nfunction restartServer(msg) {\n    exec(restartCommand, (error, stdout, stderr) => {\n        if (error) {\n            node.error('Failed to restart server. Error: ' + error.message);\n            node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n        } else {\n            node.log('Server restarted successfully');\n            node.status({ fill: 'green', shape: 'dot', text: 'Server restarted' });\n        }\n    });\n\n    return msg;\n}\n\n// Reiniciar el servidor cuando se recibe un mensaje\nrestartServer(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "5c54763d2b95cc1a",
        "type": "function",
        "z": "1c542773be693934",
        "name": "Reboot System",
        "func": "const exec = require('child_process').exec;\n\n// Comando para reiniciar el sistema operativo\nconst rebootCommand = 'sudo reboot';\n\n// Función para reiniciar el sistema operativo\nfunction rebootSystem(msg) {\n    exec(rebootCommand, (error, stdout, stderr) => {\n        if (error) {\n            node.error('Failed to reboot system. Error: ' + error.message);\n            node.status({ fill: 'red', shape: 'dot', text: 'Reboot failed' });\n        } else {\n            node.log('System reboot initiated');\n            node.status({ fill: 'green', shape: 'dot', text: 'System rebooting' });\n        }\n    });\n\n    return msg;\n}\n\n// Reiniciar el sistema cuando se recibe un mensaje\nrebootSystem(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "8302498ce177a636",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "Simulate Error",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "simulate error",
        "payloadType": "str",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "6ad4fc497729c7be"
            ]
        ]
    },
    {
        "id": "6ad4fc497729c7be",
        "type": "function",
        "z": "1c542773be693934",
        "name": "function 2",
        "func": "// Comprobar si el mensaje es un 'simulated error'\nif (msg.payload === \"simulate error\") {\n    throw new Error(\"Simulated Error\");\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "d56592d75acb7240",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "757328dacaa35476",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "fd1244510485f0fe",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "d056ba04264f93be",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "72a75d86c6fb7ea1",
        "type": "inject",
        "z": "1c542773be693934",
        "name": "EDP1_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "9303d4b089a21f41"
            ]
        ]
    },
    {
        "id": "180118feaf9d2736",
        "type": "debug",
        "z": "1c542773be693934",
        "name": "flujo delta",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 560,
        "wires": []
    },
    {
        "id": "ab16974031236ac2",
        "type": "ui-form",
        "z": "0630a8264fc13136",
        "name": "Laboratorio",
        "group": "7c21feeaf5ff947a",
        "label": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Hora de toma de muestra",
                "key": "Hora",
                "type": "time",
                "required": true,
                "rows": null
            },
            {
                "label": "Fecha",
                "key": "Fecha",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "DSR_Columna",
                "key": "DSR Columna",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "DSR_FA-09",
                "key": "DSR FA-09",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Hora": "",
            "Fecha": "",
            "DSR Columna": "",
            "DSR FA-09": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "4f6cfc2bd1d7add1"
            ]
        ]
    },
    {
        "id": "ee0ef4993af1bea2",
        "type": "debug",
        "z": "0630a8264fc13136",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "4f6cfc2bd1d7add1",
        "type": "function",
        "z": "0630a8264fc13136",
        "name": "Process Form Data",
        "func": "let formData = msg.payload;\nlet hora = formData.Hora;\nlet fecha = formData.Fecha;\nlet dsr_columna = parseFloat(formData['DSR Columna']);\nlet dsr_fa09 = parseFloat(formData['DSR FA-09']);\n\nlet timestamp = new Date(fecha + 'T' + hora);\n\n// Obtener el desplazamiento de la zona horaria en minutos\nlet timezoneOffset = timestamp.getTimezoneOffset();\n\n// Ajustar el timestamp sumando el desplazamiento de la zona horaria\ntimestamp.setMinutes(timestamp.getMinutes() - timezoneOffset);\n\n// Obtener el timestamp en milisegundos\ntimestamp = timestamp.getTime();\n\nmsg.payload = {\n    bucket: 'laboratorio',\n    precision: 'ms',\n    data: [\n        {\n            measurement: 'ResultadosLaboratorio',\n            tags: {\n                equipo_id: 'Reometro',\n                ubicacion: 'Refinería'\n            },\n            fields: {\n                DSR_Columna: dsr_columna,\n                DSR_FA09: dsr_fa09\n            },\n            timestamp: timestamp\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "ee0ef4993af1bea2",
                "95a83baeb9a08291"
            ]
        ]
    },
    {
        "id": "95a83baeb9a08291",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "0630a8264fc13136",
        "server": "a1b3d7fc83d5c6f6",
        "name": "DB",
        "x": 670,
        "y": 480,
        "wires": [
            []
        ]
    }
]